"""Initial database schema

Revision ID: f8bde5e58866
Revises:
Create Date: 2025-08-07 20:35:42.443901

"""
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "f8bde5e58866"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "metadata_schemas",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("fields", sa.JSON(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index("idx_schema_name", "metadata_schemas", ["name"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("username", sa.String(length=50), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("password_hash", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )
    op.create_index("idx_user_username", "users", ["username"], unique=False)
    op.create_table(
        "files",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("path", sa.String(length=1024), nullable=False),
        sa.Column("size", sa.Integer(), nullable=False),
        sa.Column("checksum", sa.String(length=64), nullable=False),
        sa.Column("status", sa.String(length=50), nullable=True),
        sa.Column("version", sa.Integer(), nullable=True),
        sa.Column("is_latest", sa.Boolean(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_file_checksum", "files", ["checksum"], unique=False)
    op.create_index("idx_file_status", "files", ["status"], unique=False)
    op.create_index("idx_file_user", "files", ["user_id"], unique=False)
    op.create_index("idx_file_version", "files", ["version", "is_latest"], unique=False)
    op.create_table(
        "audit_logs",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("file_id", sa.UUID(), nullable=True),
        sa.Column("action", sa.String(length=50), nullable=False),
        sa.Column("details", sa.Text(), nullable=True),
        sa.Column("ip_address", sa.String(length=45), nullable=True),
        sa.Column("user_agent", sa.String(length=255), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["files.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_audit_file", "audit_logs", ["file_id"], unique=False)
    op.create_index("idx_audit_user", "audit_logs", ["user_id"], unique=False)
    op.create_table(
        "embeddings",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("file_id", sa.UUID(), nullable=False),
        sa.Column("model_name", sa.String(length=100), nullable=False),
        sa.Column("vector", postgresql.ARRAY(sa.Float()), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["files.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_embedding_file", "embeddings", ["file_id"], unique=False)
    op.create_table(
        "file_metadata",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("file_id", sa.UUID(), nullable=False),
        sa.Column("schema_id", sa.UUID(), nullable=False),
        sa.Column("values", sa.JSON(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["files.id"],
        ),
        sa.ForeignKeyConstraint(
            ["schema_id"],
            ["metadata_schemas.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("file_id", "schema_id", name="unique_file_schema"),
    )
    op.create_index("idx_metadata_file", "file_metadata", ["file_id"], unique=False)
    op.create_index("idx_metadata_schema", "file_metadata", ["schema_id"], unique=False)
    op.create_table(
        "lineage_events",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("file_id", sa.UUID(), nullable=False),
        sa.Column("event_type", sa.String(length=50), nullable=False),
        sa.Column("source", sa.String(length=255), nullable=True),
        sa.Column("destination", sa.String(length=255), nullable=True),
        sa.Column("operation", sa.String(length=100), nullable=True),
        sa.Column("parameters", sa.JSON(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["files.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_lineage_file", "lineage_events", ["file_id"], unique=False)
    op.create_table(
        "search_indices",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("file_id", sa.UUID(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("tokens", postgresql.ARRAY(sa.String()), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["file_id"],
            ["files.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_search_file", "search_indices", ["file_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("idx_search_file", table_name="search_indices")
    op.drop_table("search_indices")
    op.drop_index("idx_lineage_file", table_name="lineage_events")
    op.drop_table("lineage_events")
    op.drop_index("idx_metadata_schema", table_name="file_metadata")
    op.drop_index("idx_metadata_file", table_name="file_metadata")
    op.drop_table("file_metadata")
    op.drop_index("idx_embedding_file", table_name="embeddings")
    op.drop_table("embeddings")
    op.drop_index("idx_audit_user", table_name="audit_logs")
    op.drop_index("idx_audit_file", table_name="audit_logs")
    op.drop_table("audit_logs")
    op.drop_index("idx_file_version", table_name="files")
    op.drop_index("idx_file_user", table_name="files")
    op.drop_index("idx_file_status", table_name="files")
    op.drop_index("idx_file_checksum", table_name="files")
    op.drop_table("files")
    op.drop_index("idx_user_username", table_name="users")
    op.drop_table("users")
    op.drop_index("idx_schema_name", table_name="metadata_schemas")
    op.drop_table("metadata_schemas")
    # ### end Alembic commands ###
